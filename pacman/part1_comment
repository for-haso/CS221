"""
Here are some method calls that might be useful when implementing minimax.

gameState.getLegalActions(agentIndex):
  Returns a list of legal actions for an agent
  agentIndex=0 means Pacman, ghosts are >= 1

Directions.STOP:
  The stop direction, which is always legal

gameState.generateSuccessor(agentIndex, action):
  Returns the successor game state after an agent takes an action

gameState.getNumAgents():
  Returns the total number of agents in the game

gameState.isWin():
  Returns True if it's a winning state

gameState.isLose():
  Returns True if it's a losing state

self.depth:
  The depth to which search should continue

getAction takes a GameState and returns some Directions.X for some X in the set {North, South, West, East, Stop}
------------------------------------------------------------------------------
Description of GameState and helper functions:

A GameState specifies the full game state, including the food, capsules,
agent configurations and score changes. In this function, the |gameState| argument 
is an object of GameState class. Following are a few of the helper methods that you 
can use to query a GameState object to gather information about the present state 
of Pac-Man, the ghosts and the maze.

gameState.getLegalActions(): 
    Returns the legal actions for the agent specified. Returns Pac-Man's legal moves by default.

gameState.generateSuccessor(agentIndex, action): 
    Returns the successor state after the specified agent takes the action. 
    Pac-Man is always agent 0.

gameState.getPacmanState():
    Returns an AgentState object for pacman (in game.py)
    state.pos gives the current position
    state.direction gives the travel vector

gameState.getGhostStates():
    Returns list of AgentState objects for the ghosts

gameState.getNumAgents():
    Returns the total number of agents in the game
    """
